#!/bin/bash
#
# Bash Simple Server Monitor
# Version: 2022-08-13
# Intended to be used with a cronjob. For more details see README.md.

# Importing the config file
source bssm_config
  if [[ $? != 0 ]]; then
    echo "config file not found - aborting"
    exit 1
  fi

# Set the timer, in case we'll later need it for the footer
if [[ $MOD_FOOTER = 1 ]]; then
  TIMER1=$(($(date +%s%N)/1000000))
fi

# Make sure all the messages are displayed in English for consistency
export LC_MESSAGES=C

# Test whether we can actually write to the given directory
if [[ -w $OUTPUT_DIR ]]; then :
  else echo "Output directory is not existent or not writeable by current user - aborting"
       exit 1
fi

# Initialize file, aka delete the old one - if it exists
if [[ -e $OUTPUT_DIR/$OUTPUT_FILENAME ]]; then
  rm $OUTPUT_DIR/$OUTPUT_FILENAME
fi


### Begin of the actual output modules ###

# HTML output, header
if [[ $MOD_HTML = 1 ]]; then
  echo -e "<html>\n<head>\n<title>Statistics for $(hostname)</title>\n<style type="text/css">body {color:$MOD_HTML_COLOR; background-color:$MOD_HTML_BACKGROUND;}</style>\n</head>\n<body>\n<pre>\n" >> $OUTPUT_DIR/$OUTPUT_FILENAME
fi
           
# Header
if [[ $MOD_HEADER = 1 ]]; then
  echo -e "$FIELD_SEPARATOR$FIELD_SEPARATOR Statistics for $(hostname) $FIELD_SEPARATOR$FIELD_SEPARATOR\n" >> $OUTPUT_DIR/$OUTPUT_FILENAME
fi

# General system information
#   This uses neofetch, which itself is a bash script, so if one wanted the relevant parts could be copied in here
#   The way the load is displayed is kinda hacky
if [[ $MOD_SYSINFO = 1 ]]; then
  echo -e "$(neofetch kernel distro --cpu_temp C)" >> $OUTPUT_DIR/$OUTPUT_FILENAME
  echo -e "$(uptime -p)\nup since: $(uptime -s)" >> $OUTPUT_DIR/$OUTPUT_FILENAME
  echo -e "load average (1/5/15min):$(uptime | awk -F'average:' '{print $2}')" >> $OUTPUT_DIR/$OUTPUT_FILENAME
  echo -e "users logged in: $(who -q | head -1)\n" >> $OUTPUT_DIR/$OUTPUT_FILENAME
fi

# CPU
if [[ $MOD_CPU = 1 ]]; then
  echo -e "$FIELD_SEPARATOR     CPU     $FIELD_SEPARATOR\n$(lscpu | grep CPU | head -8)\n" >> $OUTPUT_DIR/$OUTPUT_FILENAME
fi

# Sensors
if [[ $MOD_SENSORS = 1 ]]; then
  echo -e "$FIELD_SEPARATOR   Sensors   $FIELD_SEPARATOR\n$(sensors)\n" >> $OUTPUT_DIR/$OUTPUT_FILENAME
fi

# File systems
if [[ $MOD_FILESYSTEMS = 1 ]]; then
  echo -e "$FIELD_SEPARATOR Filesystems $FIELD_SEPARATOR\n$(df -h -T -x devtmpfs -x tmpfs --total 2> /dev/null)\n" >> $OUTPUT_DIR/$OUTPUT_FILENAME
fi

# RAM
if [[ $MOD_RAM = 1 ]]; then
  echo -e "$FIELD_SEPARATOR     RAM     $FIELD_SEPARATOR\n$(free -h --total)\n" >> $OUTPUT_DIR/$OUTPUT_FILENAME
fi

# Tasks
if [[ $MOD_TASKS = 1 ]]; then
  if [[ "$MOD_TASKS_COUNT" =~ "^[0-9]+$" ]]; then
    echo "MOD_TASKS_COUNT not an integer, defaulting to 10."
    MOD_TASKS_COUNT=10
  fi
  echo "$FIELD_SEPARATOR    Tasks    $FIELD_SEPARATOR" >> $OUTPUT_DIR/$OUTPUT_FILENAME
  top -b -n 1 | cut -d $'\n' -f 2 >> $OUTPUT_DIR/$OUTPUT_FILENAME
  top -b -n 1 -o %CPU | cut -d $'\n' -f 7- | head -$(($MOD_TASKS_COUNT+1)) >> $OUTPUT_DIR/$OUTPUT_FILENAME
  echo >> $OUTPUT_DIR/$OUTPUT_FILENAME
fi

# Network
if [[ $MOD_NETWORK = 1 ]]; then
  echo -e "$FIELD_SEPARATOR   Network   $FIELD_SEPARATOR\n$(ip -h -s a show $MOD_NETWORK_DEVICE)" >> $OUTPUT_DIR/$OUTPUT_FILENAME
    if [[ $? = 1 ]]; then
      echo "Set the correct network device in bssm_config." >> $OUTPUT_DIR/$OUTPUT_FILENAME
    fi
  echo >> $OUTPUT_DIR/$OUTPUT_FILENAME
fi

# Network, second interface since servers often have more than one
if [[ $MOD_NETWORK2 = 1 ]]; then
  echo -e "$FIELD_SEPARATOR   Network   $FIELD_SEPARATOR\n$(ip -h -s a show $MOD_NETWORK_DEVICE2)" >> $OUTPUT_DIR/$OUTPUT_FILENAME
    if [[ $? = 1 ]]; then
      echo "Set the correct network device in bssm_config." >> $OUTPUT_DIR/$OUTPUT_FILENAME
    fi
  echo >> $OUTPUT_DIR/$OUTPUT_FILENAME
fi

# Footer
if [[ $MOD_FOOTER = 1 ]]; then
  echo -e "\nfile written: $(date)" >> $OUTPUT_DIR/$OUTPUT_FILENAME
  # Finish the timer and output the result
  TIMER2=$(($(date +%s%N)/1000000))
  echo "file writing took $(($TIMER2-$TIMER1)) milliseconds" >> $OUTPUT_DIR/$OUTPUT_FILENAME
fi

# HTML output, footer
if [[ $MOD_HTML = 1 ]]; then
  echo -e "\n</pre></body></html>" >> $OUTPUT_DIR/$OUTPUT_FILENAME
fi

### End of output modules ###


# Archiving of older stats by making a timestamped copy of the current one that will not be erased the next time this script is run
if [[ $ARCHIVE = 1 ]]; then
  ARCHIVE_FILENAME="${OUTPUT_FILENAME}_$(date +%Y%m%d_%H%M%S)"
  cp $OUTPUT_DIR/$OUTPUT_FILENAME $OUTPUT_DIR/$ARCHIVE_FILENAME
fi

# ~The End~
